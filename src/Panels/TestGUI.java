/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Questions.MCQMA;
import Questions.MCQWSA;
import Questions.QWMS;
import Questions.Question;
import Questions.TFQ;
import Questions.Test;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Eirini
 */
public class TestGUI extends javax.swing.JFrame {

    /**
     * Creates new form TestGUI
     */
    public TestGUI() {
        initComponents();
        this.test = new Test(); 
        super.setTitle("User Test"); 
        this.jButton1.setEnabled(false); 
        this.jButton2.setEnabled(false); 
        this.jButton3.setEnabled(false); 
        this.jLabel3.setVisible(false);
       // this.jPanel1.add( new TFQPanel()); 
       // this.jPanel1.repaint(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Timer: 00:00:00");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Test's Total Time:");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("Results");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Score:");

        jMenu1.setText("File");

        jMenuItem1.setText("Select Test");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem2.setText("Help");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 667, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(197, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
           JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
           int returnValue = chooser.showSaveDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = chooser.getSelectedFile();
                this.readTest(selectedFile.getAbsolutePath());
                this.jLabel2.setText("Test's Total Time: "+this.test.getTotalTime()+" minutes");
            }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.endOfTest = false; 
        testTimer = new TestTimer();         
        createQuestion(); 
        this.jButton1.setEnabled(false);
        this.jButton2.setEnabled(true); 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        createQuestion(); 
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.out.println("Current Question Index:"+this.currentQuestionIndex);
        /**
         * the results should be done for question indices 0 to this.currentQuestionIndex. 
         * 
         */
        this.makeTable();
        int correctAnswers = 0; 
        double score = 0.0; 
        for(int i=0;i<this.test.getQuestions().size();i++){
           System.out.println(this.test.getQuestions().get(i).getStatement()+ " has been answered "+this.test.getQuestions().get(i).getUserResponse());
           this.tableModel.addRow(new Object[]{this.test.getQuestions().get(i).getStatement(),this.test.getQuestions().get(i).getUserResponse()});
           if(this.test.getQuestions().get(i).getUserResponse()==true){
               correctAnswers++;
           }else{
               
           }
        }
        System.out.println("CorrectAnswers:"+correctAnswers);
        score  = 100*(double)correctAnswers/(double)this.test.getQuestions().size(); 
        NumberFormat formatter = new DecimalFormat("#0.0");  
        System.out.println("Score is "+formatter.format(score));
        this.appendResults(score); 
        System.out.println("Current score is "+score);
        System.out.println("Cumulative is "+this.createCumulativeResults());
        JOptionPane.showMessageDialog(this,"<HTML><H1>Your score in Test "+this.test.getTestName() +" is: "+(int)score+"%</H1>"+
                "<H2>Your cumulative score is "+(int)this.createCumulativeResults()+"%</H2>"+
                "</HTML>");
        new ResultsGUI(tableModel,score); 
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFrame helpJFrame = new JFrame("Help");
       JLabel helpLabel = new JLabel(this.helpText);
       helpJFrame.add(helpLabel);
       helpJFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
       helpJFrame.setSize(600,400);
       helpJFrame.setLocation(0,0);
       helpJFrame.setVisible(true);        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * This method read the cumulative results file and computes the
     * average score. 
     * @return 
     */
    private double createCumulativeResults(){
         File f = new File(this.cumulativeResultsFileName); 
         Scanner sc; 
         if(!f.exists()){
            return 0;
          }else{
             try{
              double s = 0; 
              int n = 0; 
                sc = new Scanner(new File(this.cumulativeResultsFileName));
                while(sc.hasNext()){
                  String inputLine = sc.nextLine(); System.out.println(inputLine);
                  String temp =  inputLine.split(",")[1] ;
                  s = s + Double.parseDouble(temp);
                  n++;
              }
              return s/(double)n;
             }catch(Exception e){
                 e.printStackTrace();
                 return 0; 
             }
          }
    }
    
    private void appendResults(double score){
        File f = new File(this.cumulativeResultsFileName); 
        if(f.exists()){
            try {
                f.createNewFile();
            } catch (IOException ex) {
                System.out.println("A file could not be created!");
            }
        }
        try {
            PrintWriter pr = new PrintWriter(new FileOutputStream(f, true)); 
            pr.close(); 
            
        } catch (FileNotFoundException ex) {
            System.out.println("Error with printwriter");
        }
    }
    
    private void createQuestion(){
        this.currentQuestionIndex++;  
        System.out.println("----->"+this.currentQuestionIndex);
        if(this.currentQuestionIndex+1 >this.test.getNumberOfQuestions()){
            this.jPanel1.removeAll();
            this.jPanel1.revalidate();
            this.jPanel1.repaint();
            this.endOfTest = true; 
            this.testTimer.timer.stop();
            System.out.println("----->"+this.testTimer.timer.isRunning());
            JOptionPane.showMessageDialog(this, "Done with the test"); 
            this.jButton2.setEnabled(false);
            this.jButton3.setEnabled(true); 
            return; 
        }
        Question q = this.test.getQuestion(this.currentQuestionIndex); 
        System.out.println(q);
        if(q!=null){
            this.jPanel1.removeAll();
            if(q.getClass().equals(new TFQ(null, false).getClass())){
                this.jPanel1.add(new TFQPanel4Test((TFQ)q));
            }else if(q.getClass().equals(new QWMS(" ", " ").getClass())){
                this.jPanel1.add(new QWMSPanel4Test((QWMS)q));
            }else if (q.getClass().equals(   new MCQWSA(" ",null, 0).getClass())){
                System.out.println(q);
                this.jPanel1.add(new MCQWSAPanel4Test((MCQWSA)q)); 
            }else if (q.getClass().equals(   new MCQMA(" ",null,null).getClass())){
                this.jPanel1.add(new MCQMAPanel4Test((MCQMA)q)); 
            }else{
                System.out.println("Do nothing... ");
            }
        }else{
            System.out.println("NULL question... ");
        }
        this.jPanel1.revalidate();
        this.jPanel1.repaint();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestGUI().setVisible(true);
            }
        });
    }
    
    private void makeTable(){
        this.table = new JTable();
        this.tableModel = new DefaultTableModel(new Object[]{"Question","Your Response Was"},0); 
        this.table.setModel(this.tableModel); 
        
    }

    private String cumulativeResultsFileName = "cumulativeResults.txt"; // a file with cumulative results. 
    private TestTimer testTimer = null;  // a timer object
    private Test test; // the test to be taken
    private int currentQuestionIndex = -1; // if eg. 2 then the first 2 questions are answered. 
    private volatile boolean endOfTest; // a variable that flags the end of the test
    private JTable table;  // jTable 
    private DefaultTableModel tableModel; // container for table MVC 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public void readTest(String testFileName){
        ObjectInputStream ois = null;
        FileInputStream fis   = null; 
        try{
            fis = new FileInputStream(new File(testFileName));
            ois = new ObjectInputStream(fis);
            this.test = (Test)ois.readObject(); 
            this.jButton1.setEnabled(true);
            this.shuffleQuestions();
        }catch(Exception e){
            javax.swing.JOptionPane.showMessageDialog(this,"Error Reading Test","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    private void shuffleQuestions(){
        ArrayList<Question>q = this.test.getQuestions();
        for(int i=0;i<this.test.getNumberOfQuestions()*100;i++){
            int i1 = (int)(Math.random()*this.test.getNumberOfQuestions());
            int i2  = (int)(Math.random()*this.test.getNumberOfQuestions());
            Question temp = this.test.getQuestion(i1);
            this.test.getQuestions().set(i1, this.test.getQuestions().get(i2));
            this.test.getQuestions().set(i2,temp); 
        }
            
    }
    private class TestTimer{
        
        public boolean hasOneDigitOnly(int k){
            if( k/10==0){
                return true;
            }else{
                return false; 
            }
        }
        public void makeTimeString(int timeInSeconds){
            int minutes = timeInSeconds/60; 
            int seconds = timeInSeconds%60;
            int hours   = timeInSeconds/3600; 
            
            if(hasOneDigitOnly(hours)){
                str = "0"+hours+":";
            }else{
                str = hours+":"; 
            }
            if(hasOneDigitOnly(minutes)){
                str = str+"0"+minutes+":"; 
            }else{
                str = str+minutes+":"; 
            }
            if(hasOneDigitOnly(seconds)){
                str = str+"0"+seconds;
            }else{
                str = str +seconds; 
            }
            jLabel1.setText("Timer: "+str);
        }
        ActionListener actionListener = new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent actionEvent) {
              
             // System.out.println(test.getTotalTime() +" "+seconds/60 );
              if(test.getTotalTime()>seconds/60){
                makeTimeString(seconds); 
              }else{
                  jButton2.setEnabled(false);
                  jButton3.setEnabled(true); 
                  makeTimeString(seconds); 
                  jPanel1.removeAll();jPanel1.revalidate();jPanel1.repaint(); 
                  JOptionPane.showMessageDialog(null, "<HTML><H1>End of Time:</H1></HTML>");
                   
                  timer.stop();
              }
              seconds++;  
        }
       };

       // fields of the class; 
       String str = null; 
       Timer timer = new Timer(1000, actionListener);
       private int seconds; 
       public TestTimer(){
           this.seconds = 0; 
           timer.start(); 
       }
    }
    
    
    String helpText="<HTML><h1 align=\"center\">\n" +
"    Help\n" +
"</h1>\n" +
"<h2>\n" +
"    How to start taking a test?\n" +
"</h2>\n" +
"<p>\n" +
"    In order to start taking a test, the test must first be selected by\n" +
"    pressing the “File” button in the upper left corner and then the “Select\n" +
"    Test”. The test should be in the right format which means that it should be\n" +
"    created by the “Create test program”. After selecting an appropriate file,\n" +
"    the test loads. Therefore, the “Test’s Total Time:” is updated and the\n" +
"    timer begins when the “Start” button is pressed.\n" +
"</p>\n" +
"<h2>\n" +
"    How to get the results when the test has finished?\n" +
"</h2>\n" +
"<p>\n" +
"    When the test has started, you just respond to the questions and then press\n" +
"    the button “OK” and then “Next”. When the test has finished and all\n" +
"    questions inputted before the end of the time, a message box appears with\n" +
"    the text “Done with the test”. By pressing the “OK” button and “Results”, a\n" +
"    panel with your score appears. After clicking “OK” another panel displaying\n" +
"    the questions and whether the response provided was true or false.\n" +
"</p></HTML>";
}
